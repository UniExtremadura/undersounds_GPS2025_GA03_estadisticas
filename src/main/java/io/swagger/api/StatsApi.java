/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.75).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.AlbumStats;
import io.swagger.model.ArtistStats;
import io.swagger.model.Error;
import io.swagger.model.MerchStats;
import io.swagger.model.Song;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2025-10-23T09:58:42.026149969Z[GMT]")
@Validated
public interface StatsApi {

    @Operation(summary = "Obtain album's stats", description = "", tags={ "Stats" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Estadísticas obtenidas", content = @Content(mediaType = "application/json", schema = @Schema(implementation = AlbumStats.class))) })
    @RequestMapping(value = "/stats/album/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<AlbumStats> statsAlbumIdGet(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("id") String id
);


    @Operation(summary = "Obtener artist's stats", description = "", tags={ "Stats" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Estadísticas obtenidas", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ArtistStats.class))) })
    @RequestMapping(value = "/stats/artist/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ArtistStats> statsArtistIdGet(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("id") String id
);


    @Operation(summary = "Obtain merch's stats", description = "", tags={ "Stats" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Estadísticas obtenidas", content = @Content(mediaType = "application/json", schema = @Schema(implementation = MerchStats.class))) })
    @RequestMapping(value = "/stats/merch/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<MerchStats> statsMerchIdGet(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("id") String id
);


    @Operation(summary = "Get top listened songs", description = "Returns the most played songs globally.", tags={ "Stats" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Top listened songs", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Song.class)))),
        
        @ApiResponse(responseCode = "400", description = "Invalid parameters", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal server error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/stats/songs/top",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Song>> statsSongsTopGet(@Parameter(in = ParameterIn.QUERY, description = "Number of songs to return" ,schema=@Schema( defaultValue="10")) @Valid @RequestParam(value = "limit", required = false, defaultValue="10") Integer limit
);

}

